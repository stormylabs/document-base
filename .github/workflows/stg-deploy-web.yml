name: Web - Deploy to Amazon ECS Staging

on:
  push:
    branches:
      - 'release/**'
      - 'feature/**'

  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: document-base-web # set this to your Amazon ECR repository name
  ECS_SERVICE: document-base-web-stg # set this to your Amazon ECS service name
  ECS_CLUSTER: document-base # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    ./packages/web/.aws/document-base-web-stg.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    document-base-web-stg # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  actions: write
  checks: write
  deployments: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      - name: Install Dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EXTERNAL_WEB_URL: ${{ secrets.EXTERNAL_WEB_URL }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
        run: |
          # Build a docker container and tag
          npx nx run web:docker-build -- -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Push docker image to ECR so that it can be deployed to ECS.
          npx nx run web:docker-push -- $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
